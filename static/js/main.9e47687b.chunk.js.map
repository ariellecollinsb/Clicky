{"version":3,"sources":["components/Card/Card.js","components/Container/Container.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","id","onClick","shuffleScoreCard","Container","children","Score","total","highScore","status","App","state","images","clickedImageIds","score","goal","length","includes","setState","push","i","j","Math","floor","random","this","map","key","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w6BAaeA,G,MARF,SAAAC,GAAK,OAEhB,yBAAKC,UAAU,4BACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,MAAOC,GAAIN,EAAMM,GAChDC,QAAS,kBAAMP,EAAMQ,iBAAiBR,EAAMM,KAAKL,UAAU,oBCGpDQ,G,MARG,SAAAT,GAAK,OACvB,oCACA,yBAAKC,UAAU,aACdD,EAAMU,UAFP,IAIA,yBAAKT,UAAU,aCEAU,G,MAPD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,aACb,wBAAIA,UAAU,mBAAd,UAAwCD,EAAMY,MAA9C,qBAAuEZ,EAAMa,WAC7E,wBAAIZ,UAAU,UAAUD,EAAMc,W,OCyFnBC,G,iNAtFbC,MAAQ,CACNC,SACAC,gBAAiB,GACjBC,MAAO,EACPC,KAAM,GACNP,UAAW,EACXC,OAAQ,gC,EAIVN,iBAAmB,SAAAF,GACjB,IAAIY,EAAkB,EAAKF,MAAME,gBAC7BC,EAAQD,EAAgBG,OAE5B,GAAIH,EAAgBI,SAAShB,GAAK,CAEhC,IAAIO,EAAY,EAAKG,MAAMH,UAK3B,OAJIA,EAAYM,IACdN,EAAYM,QAEd,EAAKI,SAAS,CAAEL,gBAAiB,GAAIC,MAAO,EAAGN,UAAWA,EAAWC,OAAQ,8CAO7E,GAHAI,EAAgBM,KAAKlB,GAGP,MAFda,EAAQD,EAAgBG,QAEN,CAChB,IAAIR,EAAY,EAAKG,MAAMH,UAO3B,OANIA,EAAYM,IACdN,EAAYM,QAId,EAAKI,SAAS,CAAEJ,MAAOA,EAAON,UAAWA,EAAWC,OAAQ,gCAAiCI,gBAAiB,KAIhH,EAAKK,SAAS,CAAEN,SAAQC,kBAAiBC,MAAOA,EAAOL,OAAQ,4BAE/D,IAAK,IAAIW,EAAIR,EAAOI,OAAS,EAAGI,EAAI,EAAGA,IAAK,CAC1C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADE,EAEjB,CAACR,EAAOS,GAAIT,EAAOQ,IAA3CR,EAAOQ,GAFkC,KAE9BR,EAAOS,GAFuB,O,wEAQtC,IAAD,OACP,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,iBAGA,uBAAGA,UAAU,aAAb,wCAIF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOW,MAAOkB,KAAKd,MAAMG,MACvBN,UAAWiB,KAAKd,MAAMH,UACtBO,KAAM,GACNN,OAAQgB,KAAKd,MAAMF,SAErB,kBAAC,EAAD,KACGgB,KAAKd,MAAMC,OAAOc,KAAI,SAAA1B,GAAK,OAC1B,kBAAC,EAAD,CACEG,iBAAkB,EAAKA,iBACvBF,GAAID,EAAMC,GACV0B,IAAK3B,EAAMC,GACXD,MAAOA,EAAMA,aAKrB,4BAAQJ,UAAU,cAChB,2BACE,uBAAGgC,KAAK,sCAAR,WADF,KAC4D,uBAAGA,KAAK,kEAAR,cAE5D,2BAAG,wD,GAlFKC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9e47687b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\n//this component is only rendering the images to the screen and can be a simple render function it is a\r\n//stateless component\r\nconst Card = props => (\r\n\r\n  <div className=\"card img-container hover\">\r\n      <img alt={props.name} src={props.image} id={props.id}\r\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\n//stateless component\r\nconst Container = props => \r\n<>\r\n<div className=\"container\">\r\n{props.children}\r\n</div>;\r\n<div className=\"clear\"></div>\r\n</>\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./Score.css\"\r\n\r\n//stateless component\r\nconst Score = props => (\r\n  <div className=\"gameScore\">\r\n    <h3 className=\"score highScore\">Score: {props.total}  --   HighScore: {props.highScore}</h3>\r\n    <h3 className=\"status\">{props.status}</h3>\r\n  </div>\r\n);\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport Score from \"./components/Score\";\nimport images from \"./cards.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  // Setting this.state.images to the cards json array\n  state = {\n    images,\n    clickedImageIds: [],\n    score: 0,\n    goal: 12,\n    highScore: 0,\n    status: \"Click on any image to begin!\"\n  };\n\n  //shuffle the image cards in the browser when clicked\n  shuffleScoreCard = id => {\n    let clickedImageIds = this.state.clickedImageIds;\n    let score = clickedImageIds.length;\n\n    if (clickedImageIds.includes(id)) {\n      // User losers\n      let highScore = this.state.highScore;\n      if (highScore < score) {\n        highScore = score;\n      }\n      this.setState({ clickedImageIds: [], score: 0, highScore: highScore, status: \"You lost. Game Over! Click to play again!\" });\n      return;\n\n    } else {\n      clickedImageIds.push(id);\n      score = clickedImageIds.length;\n      \n      if (score === 12) {\n        let highScore = this.state.highScore;\n        if (highScore < score) {\n          highScore = score;\n        }\n\n        // User wins\n        this.setState({ score: score, highScore: highScore, status: \"You Won! Click to play again!\", clickedImageIds: [] });\n        return;\n      }\n\n      this.setState({ images, clickedImageIds, score: score, status: \"You Guessed Correctly!!\" });\n\n      for (let i = images.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [images[i], images[j]] = [images[j], images[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            Pika Palooza!\n            </h1>\n          <p className=\"App-intro\">\n            Don't click the same Pokemon twice-\n          </p>\n        </header>\n        <div className=\"container\">\n          <Score total={this.state.score}\n            highScore={this.state.highScore}\n            goal={12}\n            status={this.state.status}\n          />\n          <Container>\n            {this.state.images.map(image => (\n              <Card\n                shuffleScoreCard={this.shuffleScoreCard}\n                id={image.id}\n                key={image.id}\n                image={image.image}\n              />\n            ))}\n          </Container>\n        </div>\n        <footer className=\"App-footer\">\n          <p>\n            <a href=\"https://github.com/ariellecollinsb\">Github </a>||<a href=\"https://www.linkedin.com/in/arielle-collins-bovatsek-10895899/\"> LinkedIn</a>\n          </p>\n          <p><small>Copyright &copy;</small></p>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}